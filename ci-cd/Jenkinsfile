# Jenkins Pipeline for CI/CD Integration

pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        IMAGE_NAME = 'amitbatito/flask-aws-monitor'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/amit142/final_exam.git'
            }
        }
        
        stage('Parallel Checks') {
            parallel {
                stage('Linting') {
                    steps {
                        sh '''
                            echo "Running Python linting with Flake8"
                            # Mock command for Python linting
                            echo "flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics"
                            
                            echo "Running Dockerfile linting with Hadolint"
                            # Mock command for Dockerfile linting
                            echo "hadolint app/Dockerfile"
                            
                            echo "Running Shell script linting with ShellCheck"
                            # Mock command for Shell script linting
                            echo "find . -name "*.sh" -exec shellcheck {} \\;"
                        '''
                    }
                }
                stage('Security Scan') {
                    steps {
                        sh '''
                            echo "Running Python security scanning with Bandit"
                            # Mock command for Python security scanning
                            echo "bandit -r app/ -f json -o bandit-results.json"
                            
                            echo "Running Docker image security scanning with Trivy"
                            # Mock command for Docker image security scanning
                            echo "trivy image ${IMAGE_NAME}:${IMAGE_TAG}"
                            
                            echo "Running dependency security scanning"
                            # Mock command for dependency security scanning
                            echo "safety check -r app/requirements.txt"
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "Building Docker image"
                    cd app
                    docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                '''
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo "Logging in to Docker Hub"
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    
                    echo "Pushing Docker image to Docker Hub"
                    docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    docker push ${IMAGE_NAME}:latest
                    
                    echo "Logging out from Docker Hub"
                    docker logout
                '''
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
        always {
            sh 'docker system prune -af'
            cleanWs()
        }
    }
} 